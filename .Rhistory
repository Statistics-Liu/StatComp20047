func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(1.9,4.1,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-4)&(abs(gradient[2,1])<1e-4))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(1.9,4.1,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-4)&(abs(gradient[2,1])<1e-4))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(1.9,4.1,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-4)&(abs(gradient[2,1])<1e-4))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(1.9,4.1,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-4)&(abs(gradient[2,1])<1e-4))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-4)&(abs(gradient[2,1])<1e-4))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.0001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.0001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.0001))
Stochastic_GD<-function(x,y,learning_rate){
x0=rep(1,length(x))
x_data=cbind(x0,x)
y_data=matrix(y,length(y),1)
theta=matrix(c(1,1),2,1)
i=sample(1:nrow(x_data),1)
diff=x_data[i,]%*%theta-y_data[i,]
gradient=(x_data[i,])%*%diff
while (!((abs(gradient[1,1])<1e-5)&(abs(gradient[2,1])<1e-5))){
theta=theta-learning_rate*gradient
j=sample(1:nrow(x_data),1)
diff=x_data[j,]%*%theta-y_data[j,]
gradient=(x_data[j,])%*%diff
}
func=paste('y=',theta[1,1],'+',theta[2,1],'x')
return (func)
}
x1=c(1,2,3,4)
y1=c(2,4,6,8)
print(Stochastic_GD(x1,y1,0.0001))
x1=c(1,2,3,4)
devtools::check()
install.packages("Rcpp")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("MASS")
install.packages("bootstrap")
install.packages("boot")
install.packages("DAAG")
install.packages("RANN")
install.packages("Ball")
install.packages("energy")
install.packages("microbenchmark")
devtools
install.packages("devtools")
install.packages("roxygen2")
devtools::check()
devtools::check()
devtools::build()
install.packages('../StatComp20047_1.0.zip',repo=NULL)
install.packages('../StatComp20047_1.0.zip',repo=NULL)
install.packages('../StatComp20047_1.0.zip',repo=NULL)
install.packages('../StatComp20047_1.0.zip',repo=NULL)
install.packages('../StatComp20047_1.0.zip',repo=NULL)
install.packages('../StatComp20047_1.0.tar.gz',repo=NULL)
install.packages("StatComp20047")
install.packages("StatComp20047")
library(StatComp20047)
library(StatComp20047)
Gradient_Descent(c(1,2,3),c(2,4,6),0.000000002)
Gradient_Descent(c(1,2,3),c(2,4,6),0.0002)
library(StatComp20065)
install.packages("StatComp20033")
library(StatComp20033)
library(StatComp20047)
NumericMatrix gibbsC(int N, int thin) {
gibbsR <- function(N, thin) {
mat <- matrix(nrow = N, ncol = 2)
x <- y <- 0
for (i in 1:N) {
for (j in 1:thin) {
x <- rgamma(1, 3, y * y + 4)
y <- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))
}
mat[i, ] <- c(x, y)
}
mat
}
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
pwd
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
library(StatComp20047)
library(StatComp20047)
library(StatComp20047)
update.packages(StatComp20047)
update.packages(’StatComp20047‘)
update.packages(StatComp20047)
remove.packages('StatComp20047')
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
library(StatComp20047)
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
library(StatComp20047)
install.packages('../StatComp20047_1.0.tar.gz',repo='NULL')
library(StatComp20047)
library(StatComp20047)
install.packages('../StatComp20047_1.0.tar.gz',repo=NULL)
library(StatComp20047)
library(StatComp20047)
Gradient_Descent(c(1,2,3),c(2,4,6),0.00001)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
rm(list = c("Gradient_Descent", "Stochastic_GD"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
rm(list = c("Gradient_Descent", "Stochastic_GD"))
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
install.packages('../StatComp20047_1.0.tar.gz',repo=NULL)
install.packages('../StatComp20047_1.0.tar.gz',repo=NULL)
install.packages('../StatComp20047_1.0.tar.gz',repo=NULL)
install.packages('../StatComp20047_1.0.tar.gz',repo=NULL)
library(StatComp20047)
library(StatComp20047)
library(StatComp20047)
